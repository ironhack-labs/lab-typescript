"use strict";
//Object.defineProperty(exports, "__esModule", { value: true });
// 1. Create a class Todo that implements the Interface created before.
class Todo {
    constructor() {
        this.taskList = [];
    }
    addTask(task) {
        this.taskList.push(task);
        console.log(task);
        return this.taskList.length;
    }
    listAllTasks() {
        this.taskList.forEach((task) => console.log(task));
    }
    deleteTask(task) {
        let index = this.taskList.indexOf(task, 0);
        if (index > -1) {
            this.taskList.splice(index, 1);
        }
        console.log("delete an element");
        return this.taskList.length;
    }
}
// Execution
let myTodos = new Todo();
console.log("Number of items:", myTodos.addTask('This is our first task'));
console.log("Number of items:", myTodos.addTask('Eat pizza üçï yummy!!!'));
console.log("Number of items:", myTodos.addTask('Finish this iteration 1!! ü§ì'));
console.log("Number of items:", myTodos.addTask('Finish this iteration 2!! ü§ì'));
console.log("Number of items:", myTodos.addTask('Finish this iteration 3!! ü§ì'));
myTodos.listAllTasks();
console.log("Number of items:", myTodos.deleteTask('Finish this iteration 1!! ü§ì'));
console.log("Number of items:", myTodos.deleteTask('Finish this iteration 2!! ü§ì'));
myTodos.listAllTasks();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSx1RUFBdUU7QUFDdkU7SUFHRTtRQUZBLGFBQVEsR0FBa0IsRUFBRSxDQUFFO0lBSTlCLENBQUM7SUFDRCxPQUFPLENBQUMsSUFBWTtRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBQ0QsWUFBWTtRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUNwRCxDQUFDO0lBQ0QsVUFBVSxDQUFDLElBQVk7UUFDckIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDaEMsQ0FBQztDQUNKO0FBQ0QsWUFBWTtBQUNaLElBQUksT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7QUFDekIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUMzRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0FBQzFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7QUFDakYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQztBQUNqRixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0FBQ3BGLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7QUFDcEYsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQWRkIHRoZSByZWZlcmVuY2UgdG8gdGhlIFwiVG9kb0ludGVyZmFjZVwiXG5pbXBvcnQge3RvRG99IGZyb20gJy4vdG9kb0ludGVyZmFjZSc7XG5cbi8vIDEuIENyZWF0ZSBhIGNsYXNzIFRvZG8gdGhhdCBpbXBsZW1lbnRzIHRoZSBJbnRlcmZhY2UgY3JlYXRlZCBiZWZvcmUuXG5jbGFzcyBUb2RvIGltcGxlbWVudHMgdG9Eb3tcbiAgdGFza0xpc3Q6IEFycmF5PHN0cmluZz4gPSBbXSA7XG5cbiAgY29uc3RydWN0b3IoKXtcblxuICB9XG4gIGFkZFRhc2sodGFzazogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgIHRoaXMudGFza0xpc3QucHVzaCh0YXNrKTtcbiAgICAgIGNvbnNvbGUubG9nKHRhc2spO1xuICAgICAgcmV0dXJuIHRoaXMudGFza0xpc3QubGVuZ3RoO1xuICAgIH1cbiAgICBsaXN0QWxsVGFza3MoKTp2b2lke1xuICAgICAgdGhpcy50YXNrTGlzdC5mb3JFYWNoKCh0YXNrKSA9PiBjb25zb2xlLmxvZyh0YXNrKSlcbiAgICB9XG4gICAgZGVsZXRlVGFzayh0YXNrOiBzdHJpbmcpOiBudW1iZXJ7XG4gICAgICBsZXQgaW5kZXggPSB0aGlzLnRhc2tMaXN0LmluZGV4T2YodGFzaywgMCk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJkZWxldGUgYW4gZWxlbWVudFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFza0xpc3QubGVuZ3RoO1xuICAgIH1cbn1cbi8vIEV4ZWN1dGlvblxubGV0IG15VG9kb3MgPSBuZXcgVG9kbygpO1xuY29uc29sZS5sb2coXCJOdW1iZXIgb2YgaXRlbXM6XCIsIG15VG9kb3MuYWRkVGFzaygnVGhpcyBpcyBvdXIgZmlyc3QgdGFzaycpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2soJ0VhdCBwaXp6YSDtoLztvZUgeXVtbXkhISEnKSk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5hZGRUYXNrKCdGaW5pc2ggdGhpcyBpdGVyYXRpb24gMSEhIO2gvu20kycpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2soJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAyISEg7aC+7bSTJykpO1xuY29uc29sZS5sb2coXCJOdW1iZXIgb2YgaXRlbXM6XCIsIG15VG9kb3MuYWRkVGFzaygnRmluaXNoIHRoaXMgaXRlcmF0aW9uIDMhISDtoL7ttJMnKSk7XG5teVRvZG9zLmxpc3RBbGxUYXNrcygpO1xuY29uc29sZS5sb2coXCJOdW1iZXIgb2YgaXRlbXM6XCIsIG15VG9kb3MuZGVsZXRlVGFzaygnRmluaXNoIHRoaXMgaXRlcmF0aW9uIDEhISDtoL7ttJMnKSk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5kZWxldGVUYXNrKCdGaW5pc2ggdGhpcyBpdGVyYXRpb24gMiEhIO2gvu20kycpKTtcbm15VG9kb3MubGlzdEFsbFRhc2tzKCk7XG4iXX0=
