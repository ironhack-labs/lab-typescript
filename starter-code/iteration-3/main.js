"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Create class TodoItem that implements the corresponding interface
class TodoItem {
    constructor(title) {
        this.title = title;
        this.isDone = false;
    }
    toggle() {
        this.isDone = !this.isDone;
    }
}
// Create class TodoList that implements the corresponding interface
class TodoList {
    constructor() {
        this.todoItems = [];
    }
    ;
    addTask(item) {
        this.todoItems.push(item);
        return this.todoItems.length;
    }
    deleteTask(item) {
        this.todoItems.splice(this.todoItems.indexOf(item), 1);
        return this.todoItems.length;
    }
    listAllTasks() {
        this.todoItems.forEach((item) => {
            console.log(item);
        });
    }
    listUncomplete() {
        let incompletes = this.todoItems.map(function (elem) {
            if (!elem.isDone)
                return elem;
        });
        incompletes.forEach((elem) => {
            console.log(elem);
        });
    }
}
// Execution
let task1 = new TodoItem('This is our first task');
let task2 = new TodoItem('Eat pizza üçï yummy!!!');
let task3 = new TodoItem('Finish this iteration 1!! ü§ì');
let task4 = new TodoItem('Finish this iteration 2!! ü§ì');
let task5 = new TodoItem('Finish this iteration 3!! ü§ì');
let myTodos = new TodoList();
console.log("Number of items:", myTodos.addTask(task1));
console.log("Number of items:", myTodos.addTask(task2));
console.log("Number of items:", myTodos.addTask(task3));
console.log("Number of items:", myTodos.addTask(task4));
console.log("Number of items:", myTodos.addTask(task5));
myTodos.listAllTasks();
console.log("Number of items:", myTodos.deleteTask(task3));
console.log("Number of items:", myTodos.deleteTask(task4));
console.log("Number of items:", myTodos.deleteTask(task5));
myTodos.listUncomplete();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxvRUFBb0U7QUFFcEU7SUFJRSxZQUFtQixLQUFhO1FBQWIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7Q0FFRjtBQUVELG9FQUFvRTtBQUVwRTtJQUdFO1FBRkEsY0FBUyxHQUFvQixFQUFFLENBQUM7SUFFbEIsQ0FBQztJQUFBLENBQUM7SUFDaEIsT0FBTyxDQUFDLElBQWM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQy9CLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBYztRQUV2QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztRQUV6RCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDL0IsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUUsVUFBVSxJQUFJO1lBQ2xELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO1FBRUgsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7WUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQUVELFlBQVk7QUFDWixJQUFJLEtBQUssR0FBRyxJQUFJLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ25ELElBQUksS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDbEQsSUFBSSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUN6RCxJQUFJLEtBQUssR0FBRyxJQUFJLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQ3pELElBQUksS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFFekQsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN4RCxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDM0QsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQWRkIHRoZSByZWZlcmVuY2UgdG8gdGhlIGludGVyZmFjZVxuaW1wb3J0IHsgVG9kb0l0ZW1JbnRlcmZhY2UgfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XG5pbXBvcnQgeyBUb2RvSW50ZXJmYWNlIH0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiO1xuXG4vLyBDcmVhdGUgY2xhc3MgVG9kb0l0ZW0gdGhhdCBpbXBsZW1lbnRzIHRoZSBjb3JyZXNwb25kaW5nIGludGVyZmFjZVxuXG5jbGFzcyBUb2RvSXRlbSBpbXBsZW1lbnRzIFRvZG9JdGVtSW50ZXJmYWNlIHtcbiAgaXNEb25lOiBib29sZWFuO1xuICB1cGRhdGVkQXQ6IERhdGU7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHRpdGxlOiBzdHJpbmcpe1xuICAgIHRoaXMuaXNEb25lID0gZmFsc2U7XG4gIH1cblxuICB0b2dnbGUoKXtcbiAgICB0aGlzLmlzRG9uZSA9ICF0aGlzLmlzRG9uZTtcbiAgfVxuXG59XG5cbi8vIENyZWF0ZSBjbGFzcyBUb2RvTGlzdCB0aGF0IGltcGxlbWVudHMgdGhlIGNvcnJlc3BvbmRpbmcgaW50ZXJmYWNlXG5cbmNsYXNzIFRvZG9MaXN0IGltcGxlbWVudHMgVG9kb0ludGVyZmFjZSB7XG4gIHRvZG9JdGVtczogQXJyYXk8VG9kb0l0ZW0+ID0gW107XG5cbiAgY29uc3RydWN0b3IoKXt9O1xuICBhZGRUYXNrKGl0ZW06IFRvZG9JdGVtKXtcbiAgICB0aGlzLnRvZG9JdGVtcy5wdXNoKGl0ZW0pO1xuICAgIHJldHVybiB0aGlzLnRvZG9JdGVtcy5sZW5ndGg7XG4gIH1cblxuICBkZWxldGVUYXNrKGl0ZW06IFRvZG9JdGVtKXtcblxuICAgIHRoaXMudG9kb0l0ZW1zLnNwbGljZSggdGhpcy50b2RvSXRlbXMuaW5kZXhPZihpdGVtKSwgMSApO1xuXG4gICAgcmV0dXJuIHRoaXMudG9kb0l0ZW1zLmxlbmd0aDtcbiAgfVxuXG4gIGxpc3RBbGxUYXNrcygpe1xuICAgIHRoaXMudG9kb0l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgIH0pO1xuICB9XG5cbiAgbGlzdFVuY29tcGxldGUoKXtcbiAgICBsZXQgaW5jb21wbGV0ZXMgPSB0aGlzLnRvZG9JdGVtcy5tYXAoIGZ1bmN0aW9uIChlbGVtKXtcbiAgICAgIGlmICghZWxlbS5pc0RvbmUpIHJldHVybiBlbGVtO1xuICAgIH0pO1xuXG4gICAgaW5jb21wbGV0ZXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coZWxlbSk7XG4gICAgfSlcbiAgfVxufVxuXG4vLyBFeGVjdXRpb25cbmxldCB0YXNrMSA9IG5ldyBUb2RvSXRlbSgnVGhpcyBpcyBvdXIgZmlyc3QgdGFzaycpO1xubGV0IHRhc2syID0gbmV3IFRvZG9JdGVtKCdFYXQgcGl6emEg7aC87b2VIHl1bW15ISEhJyk7XG5sZXQgdGFzazMgPSBuZXcgVG9kb0l0ZW0oJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAxISEg7aC+7bSTJyk7XG5sZXQgdGFzazQgPSBuZXcgVG9kb0l0ZW0oJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAyISEg7aC+7bSTJyk7XG5sZXQgdGFzazUgPSBuZXcgVG9kb0l0ZW0oJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAzISEg7aC+7bSTJyk7XG5cbmxldCBteVRvZG9zID0gbmV3IFRvZG9MaXN0KCk7XG5cbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazEpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazIpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazMpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazQpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazUpKTtcbm15VG9kb3MubGlzdEFsbFRhc2tzKCk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5kZWxldGVUYXNrKHRhc2szKSk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5kZWxldGVUYXNrKHRhc2s0KSk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5kZWxldGVUYXNrKHRhc2s1KSk7XG5teVRvZG9zLmxpc3RVbmNvbXBsZXRlKCk7XG4iXX0=