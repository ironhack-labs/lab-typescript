// Create class TodoItem that implements the corresponding interface
class TodoItem {
    constructor(title) {
        this.title = title;
        this.status = false;
    }
    toggleStatus() {
        this.status = !this.status;
    }
}
// Create class TodoList that implements the corresponding interface
class TodoList {
    constructor() {
        this.todoItem = [];
    }
    addTask(task) {
        this.todoItem.push(task);
        console.log('=========== NEW INSERTION ===========');
        return this.todoItem.length;
    }
    listAllTasks() {
        this.todoItem.forEach((task) => {
            console.log(task.title, task.updatedAt);
            console.log(task);
        });
    }
    deleteTask(task) {
        this.todoItem.map((elem, index) => {
            if (task === elem) {
                this.todoItem.splice(index, 1);
                console.log("=========== NEW DELETION ===========");
            }
        });
        return this.todoItem.length;
    }
}
// Execution
let task1 = new TodoItem('This is our first task');
let task2 = new TodoItem('Eat pizza üçï yummy!!!');
let task3 = new TodoItem('Finish this iteration 1!! ü§ì');
let task4 = new TodoItem('Finish this iteration 2!! ü§ì');
let task5 = new TodoItem('Finish this iteration 3!! ü§ì');
let myTodos = new TodoList();
console.log("Number of items:", myTodos.addTask(task1));
console.log("Number of items:", myTodos.addTask(task2));
console.log("Number of items:", myTodos.addTask(task3));
console.log("Number of items:", myTodos.addTask(task4));
console.log("Number of items:", myTodos.addTask(task5));
myTodos.listAllTasks();
console.log("Number of items:", myTodos.deleteTask(task3));
console.log("Number of items:", myTodos.deleteTask(task4));
console.log("Number of items:", myTodos.deleteTask(task5));
//myTodos.listUncomplete();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsb0VBQW9FO0FBQ3BFO0lBR0ksWUFBbUIsS0FBYTtRQUFiLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUNELFlBQVk7UUFDVixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0NBQ0o7QUFFRCxvRUFBb0U7QUFFcEU7SUFFSTtRQURBLGFBQVEsR0FBb0IsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFDZixPQUFPLENBQUMsSUFBYztRQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFDRCxZQUFZO1FBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJO1lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxVQUFVLENBQUMsSUFBYztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLO1lBQzVCLEVBQUUsQ0FBQSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFDO2dCQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQTtZQUNyRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBQ0QsWUFBWTtBQUNaLElBQUksS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDbkQsSUFBSSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUNsRCxJQUFJLEtBQUssR0FBRyxJQUFJLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0FBQ3pELElBQUksS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFDekQsSUFBSSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUV6RCxJQUFJLE9BQU8sR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0FBRTdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hELE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMzRCwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBZGQgdGhlIHJlZmVyZW5jZSB0byB0aGUgaW50ZXJmYWNlXG5pbXBvcnQge1RvZG9JdGVtSW50ZXJmYWNlLCBUb2RvTGlzdEludGVyZmFjZX0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiO1xuXG5cbi8vIENyZWF0ZSBjbGFzcyBUb2RvSXRlbSB0aGF0IGltcGxlbWVudHMgdGhlIGNvcnJlc3BvbmRpbmcgaW50ZXJmYWNlXG5jbGFzcyBUb2RvSXRlbSBpbXBsZW1lbnRzIFRvZG9JdGVtSW50ZXJmYWNle1xuICBzdGF0dXM6IGJvb2xlYW47XG4gIHVwZGF0ZWRBdDogRGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdGl0bGU6IHN0cmluZyl7XG4gICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgIH1cbiAgICB0b2dnbGVTdGF0dXMoKTp2b2lke1xuICAgICAgdGhpcy5zdGF0dXMgPSAhdGhpcy5zdGF0dXM7XG4gICAgfVxufVxuXG4vLyBDcmVhdGUgY2xhc3MgVG9kb0xpc3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBjb3JyZXNwb25kaW5nIGludGVyZmFjZVxuXG5jbGFzcyBUb2RvTGlzdCBpbXBsZW1lbnRzIFRvZG9MaXN0SW50ZXJmYWNle1xuICAgIHRvZG9JdGVtOiBBcnJheTxUb2RvSXRlbT4gPSBbXTtcbiAgICBjb25zdHJ1Y3Rvcigpe31cbiAgICBhZGRUYXNrKHRhc2s6IFRvZG9JdGVtKTpudW1iZXJ7XG4gICAgICB0aGlzLnRvZG9JdGVtLnB1c2godGFzayk7XG4gICAgICBjb25zb2xlLmxvZygnPT09PT09PT09PT0gTkVXIElOU0VSVElPTiA9PT09PT09PT09PScpO1xuICAgICAgcmV0dXJuIHRoaXMudG9kb0l0ZW0ubGVuZ3RoO1xuICAgIH1cbiAgICBsaXN0QWxsVGFza3MoKXtcbiAgICAgIHRoaXMudG9kb0l0ZW0uZm9yRWFjaCgodGFzayk6dm9pZCA9PntcbiAgICAgICAgY29uc29sZS5sb2codGFzay50aXRsZSx0YXNrLnVwZGF0ZWRBdCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRhc2spO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGRlbGV0ZVRhc2sodGFzazogVG9kb0l0ZW0pe1xuICAgICAgdGhpcy50b2RvSXRlbS5tYXAoKGVsZW0sIGluZGV4KTp2b2lkPT57XG4gICAgICAgIGlmKHRhc2sgPT09IGVsZW0pe1xuICAgICAgICAgIHRoaXMudG9kb0l0ZW0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIj09PT09PT09PT09IE5FVyBERUxFVElPTiA9PT09PT09PT09PVwiKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLnRvZG9JdGVtLmxlbmd0aDtcbiAgICB9XG59XG4vLyBFeGVjdXRpb25cbmxldCB0YXNrMSA9IG5ldyBUb2RvSXRlbSgnVGhpcyBpcyBvdXIgZmlyc3QgdGFzaycpO1xubGV0IHRhc2syID0gbmV3IFRvZG9JdGVtKCdFYXQgcGl6emEg7aC87b2VIHl1bW15ISEhJyk7XG5sZXQgdGFzazMgPSBuZXcgVG9kb0l0ZW0oJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAxISEg7aC+7bSTJyk7XG5sZXQgdGFzazQgPSBuZXcgVG9kb0l0ZW0oJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAyISEg7aC+7bSTJyk7XG5sZXQgdGFzazUgPSBuZXcgVG9kb0l0ZW0oJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAzISEg7aC+7bSTJyk7XG5cbmxldCBteVRvZG9zID0gbmV3IFRvZG9MaXN0KCk7XG5cbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazEpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazIpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazMpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazQpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBteVRvZG9zLmFkZFRhc2sodGFzazUpKTtcbm15VG9kb3MubGlzdEFsbFRhc2tzKCk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5kZWxldGVUYXNrKHRhc2szKSk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5kZWxldGVUYXNrKHRhc2s0KSk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgbXlUb2Rvcy5kZWxldGVUYXNrKHRhc2s1KSk7XG4vL215VG9kb3MubGlzdFVuY29tcGxldGUoKTtcbiJdfQ==