// Iteration 1
// 1. Create an array of strings
let taskList = [];
// 2. Create a function to add a task in to the array, call it `addTask`, the function has to accept a string and don't have to return anything.
function addTask(task) {
    taskList.push(task);
    console.log(task);
    return taskList.length;
}
// 3. Create a function to list all tasks, it must show in the console de task.
function listAllTasks() {
    taskList.forEach((task) => console.log(task));
}
// 4. Create a function to delete a task, you must find the task inside the array and delete it.
function deleteTask(task) {
    let index = taskList.indexOf(task, 0);
    if (index > -1) {
        taskList.splice(index, 1);
    }
    console.log("delete an element");
    return taskList.length;
}
// Execution
console.log("Number of items:", addTask('This is our first task'));
console.log("Number of items:", addTask('Eat pizza üçï yummy!!!'));
console.log("Number of items:", addTask('Finish this iteration 1!! ü§ì'));
console.log("Number of items:", addTask('Finish this iteration 2!! ü§ì'));
console.log("Number of items:", addTask('Finish this iteration 3!! ü§ì'));
listAllTasks();
console.log("Number of items:", deleteTask('Finish this iteration 1!! ü§ì'));
listAllTasks();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYztBQUNkLGdDQUFnQztBQUNoQyxJQUFJLFFBQVEsR0FBcUIsRUFBRSxDQUFDO0FBRXBDLGdKQUFnSjtBQUNoSixpQkFBaUIsSUFBWTtJQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFFekIsQ0FBQztBQUNELCtFQUErRTtBQUUvRTtJQUNFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQzdDLENBQUM7QUFHSCxnR0FBZ0c7QUFDaEcsb0JBQW9CLElBQVk7SUFDOUIsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7QUFDM0IsQ0FBQztBQUVELFlBQVk7QUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7QUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQztBQUN6RSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUM7QUFDekUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLFlBQVksRUFBRSxDQUFDO0FBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0FBQzVFLFlBQVksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSXRlcmF0aW9uIDFcbi8vIDEuIENyZWF0ZSBhbiBhcnJheSBvZiBzdHJpbmdzXG5sZXQgdGFza0xpc3Q6ICAgQXJyYXk8c3RyaW5nPiAgPSBbXTtcblxuLy8gMi4gQ3JlYXRlIGEgZnVuY3Rpb24gdG8gYWRkIGEgdGFzayBpbiB0byB0aGUgYXJyYXksIGNhbGwgaXQgYGFkZFRhc2tgLCB0aGUgZnVuY3Rpb24gaGFzIHRvIGFjY2VwdCBhIHN0cmluZyBhbmQgZG9uJ3QgaGF2ZSB0byByZXR1cm4gYW55dGhpbmcuXG5mdW5jdGlvbiBhZGRUYXNrKHRhc2s6IHN0cmluZykge1xuICB0YXNrTGlzdC5wdXNoKHRhc2spO1xuICBjb25zb2xlLmxvZyh0YXNrKTtcbiAgcmV0dXJuIHRhc2tMaXN0Lmxlbmd0aDtcblxufVxuLy8gMy4gQ3JlYXRlIGEgZnVuY3Rpb24gdG8gbGlzdCBhbGwgdGFza3MsIGl0IG11c3Qgc2hvdyBpbiB0aGUgY29uc29sZSBkZSB0YXNrLlxuXG5mdW5jdGlvbiBsaXN0QWxsVGFza3MoKXtcbiAgdGFza0xpc3QuZm9yRWFjaCgodGFzaykgPT4gY29uc29sZS5sb2codGFzaykpXG4gIH1cblxuXG4vLyA0LiBDcmVhdGUgYSBmdW5jdGlvbiB0byBkZWxldGUgYSB0YXNrLCB5b3UgbXVzdCBmaW5kIHRoZSB0YXNrIGluc2lkZSB0aGUgYXJyYXkgYW5kIGRlbGV0ZSBpdC5cbmZ1bmN0aW9uIGRlbGV0ZVRhc2sodGFzazogc3RyaW5nKXtcbiAgbGV0IGluZGV4ID0gdGFza0xpc3QuaW5kZXhPZih0YXNrLCAwKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0YXNrTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcImRlbGV0ZSBhbiBlbGVtZW50XCIpO1xuICAgIHJldHVybiB0YXNrTGlzdC5sZW5ndGg7XG59XG5cbi8vIEV4ZWN1dGlvblxuY29uc29sZS5sb2coXCJOdW1iZXIgb2YgaXRlbXM6XCIsIGFkZFRhc2soJ1RoaXMgaXMgb3VyIGZpcnN0IHRhc2snKSk7XG5jb25zb2xlLmxvZyhcIk51bWJlciBvZiBpdGVtczpcIiwgYWRkVGFzaygnRWF0IHBpenphIO2gvO29lSB5dW1teSEhIScpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBhZGRUYXNrKCdGaW5pc2ggdGhpcyBpdGVyYXRpb24gMSEhIO2gvu20kycpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBhZGRUYXNrKCdGaW5pc2ggdGhpcyBpdGVyYXRpb24gMiEhIO2gvu20kycpKTtcbmNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGl0ZW1zOlwiLCBhZGRUYXNrKCdGaW5pc2ggdGhpcyBpdGVyYXRpb24gMyEhIO2gvu20kycpKTtcbmxpc3RBbGxUYXNrcygpO1xuY29uc29sZS5sb2coXCJOdW1iZXIgb2YgaXRlbXM6XCIsIGRlbGV0ZVRhc2soJ0ZpbmlzaCB0aGlzIGl0ZXJhdGlvbiAxISEg7aC+7bSTJykpO1xubGlzdEFsbFRhc2tzKCk7XG4iXX0=